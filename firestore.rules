rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if true;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Videos collection
    match /videos/{videoId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }

    // Video stats collection
    match /video_stats/{videoId} {
      allow read: if true;
      allow write: if isSignedIn();
    }

    // Interactions collection
    match /interactions/{interactionId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
      
      // Validate interaction data
      function isValidInteraction() {
        let validTypes = ['like', 'save'];
        return request.resource.data.type in validTypes
          && request.resource.data.videoId is string
          && request.resource.data.userId == request.auth.uid
          && request.resource.data.timestamp is timestamp;
      }
      
      allow write: if isSignedIn() && isValidInteraction();
    }

    // Comments collection
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        isOwner(resource.data.userId) || 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount', 'replies'])
      );
      allow delete: if isOwner(resource.data.userId);
      
      // Validate comment data
      function isValidComment() {
        return request.resource.data.text is string
          && request.resource.data.text.size() > 0
          && request.resource.data.text.size() <= 1000
          && request.resource.data.videoId is string
          && request.resource.data.userId == request.auth.uid
          && request.resource.data.timestamp is timestamp
          && (
            !('parentCommentId' in request.resource.data) || 
            request.resource.data.parentCommentId is string
          );
      }
      
      allow write: if isSignedIn() && isValidComment();
    }
  }
}